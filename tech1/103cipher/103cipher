#!/usr/bin/env python3
##
## EPITECH PROJECT, 2020
## 103cipher
## File description:
## main
##

from sys import exit, argv
from utils import calc_col, mult_matrix, generator_mat_text, encode_text, show_matrix_encode
from extra_utils import error_handling, mat_key, encoder_key_mat, calc_row

def show_result(matrix):
    string = ''
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            if matrix[i][j] != 0:
                string += ("%d " % (matrix[i][j]))
    print(string.rstrip())
    return

def show_matrix_decode(matrix):
    if (type(matrix) is not int):
        for i in range(len(matrix)):
            string = ''
            for j in range(len(matrix[i])):
                if matrix[i][j] == 0 or round(matrix[i][j], 3) == 0:
                    string += ("%-*.1f" % (8, abs(matrix[i][j])))
                else:
                    string += ("%-*.3f" % (8, matrix[i][j]))
            print(string.rstrip())
    else:
        string = ("%.1f" % (abs(matrix)))
        print(string.rstrip())
    return

def conversion_phrase(text, mat_key, a):
    len_line = calc_col(mat_key)
    long = 0
    x = text.split()
    for i in range(len(x)):
        long = i
    long = ((long / len_line) + (long % len_line))
    m = [[0 for x in range(len_line)] for y in range(int(long))]
    i = 0
    for c in range(int(long)):
        for d in range(len_line):
            if i < len(x):
                m[c][d] = int(x[i])
            else:
                m[c][d] = 0
            i += 1
    res = mult_matrix(m, a)
    return res

def conv_int_to_char(res):
    for i in range(len(res)):
        for j in range(len(res[i])):
            if (res[i][j] >= 0):
                print(chr(int(res[i][j])), end='')


def det_4_4(m):
    a1 =    m[0][3] * m[1][2] * m[2][1] * m[3][0]
    a2 =  ( m[0][2] * m[1][3] * m[2][1] * m[3][0] ) + ( m[0][3] * m[1][1] * m[2][2] * m[3][0] )
    a3 =  ( m[0][1] * m[1][3] * m[2][2] * m[3][0] ) + ( m[0][2] * m[1][1] * m[2][3] * m[3][0] )
    a4 =  ( m[0][1] * m[1][2] * m[2][3] * m[3][0] ) + ( m[0][3] * m[1][2] * m[2][0] * m[3][1] )
    a5 =  ( m[0][2] * m[1][3] * m[2][0] * m[3][1] ) + ( m[0][3] * m[1][0] * m[2][2] * m[3][1] )
    a6 =  ( m[0][0] * m[1][3] * m[2][2] * m[3][1] ) + ( m[0][2] * m[1][0] * m[2][3] * m[3][1] )
    a7 =  ( m[0][0] * m[1][2] * m[2][3] * m[3][1] ) + ( m[0][3] * m[1][1] * m[2][0] * m[3][2] )
    a8 =  ( m[0][1] * m[1][3] * m[2][0] * m[3][2] ) + ( m[0][3] * m[1][0] * m[2][1] * m[3][2] )
    a9 =  ( m[0][0] * m[1][3] * m[2][1] * m[3][2] ) + ( m[0][1] * m[1][0] * m[2][3] * m[3][2] )
    a10 = ( m[0][0] * m[1][1] * m[2][3] * m[3][2] ) + ( m[0][2] * m[1][1] * m[2][0] * m[3][3] )
    a11 = ( m[0][1] * m[1][2] * m[2][0] * m[3][3] ) + ( m[0][2] * m[1][0] * m[2][1] * m[3][3] )
    a12 = ( m[0][0] * m[1][2] * m[2][1] * m[3][3] ) + ( m[0][1] * m[1][0] * m[2][2] * m[3][3] )
    a13 =   m[0][0] * m[1][1] * m[2][2] * m[3][3]
    return a1 - a2 + a3 - a4 + a5 - a6  + a7 - a8 + a9 - a10 + a11 - a12 + a13

def det_3_3(m):
    a1 = m[0][0] * m[1][1] * m[2][2]
    a2 = m[0][1] * m[1][2] * m[2][0]
    a3 = m[0][2] * m[1][0] * m[2][1]
    a4 = m[0][0] * m[1][2] * m[2][1]
    a5 = m[0][2] * m[1][1] * m[2][0]
    a6 = m[0][1] * m[1][0] * m[2][2]
    return -1 * (a4 + a5 + a6 - a1 - a2 - a3)

def det_2_2(m):
    a1 = ( m[0][0] * m[1][1] ) - ( m[0][1] * m[1][0] )
    return a1

def manage_inverse(m):
    i = calc_row(m)
    if (i == 1):
        n = inv_1_1(m)
    elif (i == 2):
        i = inv_2_2(m)
    elif (i == 3):
        i = inv_3_3(m)
    elif (i == 4):
        i = inv_4_4(m)
    return i

def inv_1_1(mat):
    return 1 / mat[0][0]

def inv_2_2(mat):
    res = [[0, 0], [0, 0]]
    res[0][0] = mat[1][1]
    res[0][1] = (-1)*mat[0][1]
    res[1][0] = (-1)*mat[1][0]
    res[1][1] = mat[0][0]
    return res

def inv_3_3(mat):
    res = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    a = det_3_3(mat)
    res[0][0] = (1 / a) * ((mat[1][1] * mat[2][2]) - (mat[1][2] * mat[2][1]))
    res[1][0] = (1 / a) * ((mat[2][0] * mat[1][2]) - (mat[1][0] * mat[2][2]))
    res[2][0] = (1 / a) * ((mat[1][0] * mat[2][1]) - (mat[2][0] * mat[1][1]))
    res[0][1] = (1 / a) * ((mat[2][1] * mat[0][2]) - (mat[2][2] * mat[0][1]))
    res[1][1] = (1 / a) * ((mat[0][0] * mat[2][2]) - (mat[2][0] * mat[0][2]))
    res[2][1] = (1 / a) * ((mat[2][0] * mat[0][1]) - (mat[0][0] * mat[2][1]))
    res[0][2] = (1 / a) * ((mat[0][1] * mat[1][2]) - (mat[0][2] * mat[1][1]))
    res[1][2] = (1 / a) * ((mat[1][0] * mat[0][2]) - (mat[0][0] * mat[1][2]))
    res[2][2] = (1 / a) * ((mat[0][0] * mat[1][1]) - (mat[1][0] * mat[0][1]))
    return res

def inv_4_4(mat):
    r = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
    a = det_4_4(mat)
    r[0][0] = (1 / a) * ( -(r[1][3] * r[2][2] * r[3][1]) + (r[1][2] * r[2][3] * r[3][1]) + (r[1][3] * r[2][1] * r[3][2]) - (r[1][1] * r[2][3] * r[3][2]) - (r[1][2] * r[2][1] * r[3][3]) + (r[1][1] * r[2][2] * r[3][3]) )
    r[0][1] = (1 / a) * (  (r[0][3] * r[2][2] * r[3][1]) - (r[0][2] * r[2][3] * r[3][1]) - (r[0][3] * r[2][1] * r[3][2]) + (r[0][1] * r[2][3] * r[3][2]) + (r[0][2] * r[2][1] * r[3][3]) - (r[0][1] * r[2][2] * r[3][3]) )
    r[0][2] = (1 / a) * ( -(r[0][3] * r[1][2] * r[3][1]) + (r[0][2] * r[1][3] * r[3][1]) + (r[0][3] * r[1][1] * r[3][2]) - (r[0][1] * r[1][3] * r[3][2]) - (r[0][2] * r[1][1] * r[3][3]) + (r[0][1] * r[1][2] * r[3][3]) )
    r[0][3] = (1 / a) * (  (r[0][3] * r[1][2] * r[2][1]) - (r[0][2] * r[1][3] * r[2][1]) - (r[0][3] * r[1][1] * r[2][2]) + (r[0][1] * r[1][3] * r[2][2]) + (r[0][2] * r[1][1] * r[2][3]) - (r[0][1] * r[1][2] * r[2][3]) )
    r[1][0] = (1 / a) * (  (r[1][3] * r[2][2] * r[3][0]) - (r[1][2] * r[2][3] * r[3][0]) - (r[1][3] * r[2][0] * r[3][2]) + (r[1][0] * r[2][3] * r[3][2]) + (r[1][2] * r[2][0] * r[3][3]) - (r[1][0] * r[2][2] * r[3][3]) )
    r[1][1] = (1 / a) * ( -(r[0][3] * r[2][2] * r[3][0]) + (r[0][2] * r[2][3] * r[3][0]) + (r[0][3] * r[2][0] * r[3][2]) - (r[0][0] * r[2][3] * r[3][2]) - (r[0][2] * r[2][0] * r[3][3]) + (r[0][0] * r[2][2] * r[3][3]) )
    r[1][2] = (1 / a) * (  (r[0][3] * r[1][2] * r[3][0]) - (r[0][2] * r[1][3] * r[3][0]) - (r[0][3] * r[1][0] * r[3][2]) + (r[0][0] * r[1][3] * r[3][2]) + (r[0][2] * r[1][0] * r[3][3]) - (r[0][0] * r[1][2] * r[3][3]) )
    r[1][3] = (1 / a) * ( -(r[0][3] * r[1][2] * r[2][0]) + (r[0][2] * r[1][3] * r[2][0]) + (r[0][3] * r[1][0] * r[2][2]) - (r[0][0] * r[1][3] * r[2][2]) - (r[0][2] * r[1][0] * r[2][3]) + (r[0][0] * r[1][2] * r[2][3]) )
    r[2][0] = (1 / a) * ( -(r[1][3] * r[2][1] * r[3][0]) + (r[1][1] * r[2][3] * r[3][0]) + (r[1][3] * r[2][0] * r[3][1]) - (r[1][0] * r[2][3] * r[3][1]) - (r[1][1] * r[2][0] * r[3][3]) + (r[1][0] * r[2][1] * r[3][3]) )
    r[2][1] = (1 / a) * (  (r[0][3] * r[2][1] * r[3][0]) - (r[0][1] * r[2][3] * r[3][0]) - (r[0][3] * r[2][0] * r[3][1]) + (r[0][0] * r[2][3] * r[3][1]) + (r[0][1] * r[2][0] * r[3][3]) - (r[0][0] * r[2][1] * r[3][3]) )
    r[2][2] = (1 / a) * ( -(r[0][3] * r[1][1] * r[3][0]) + (r[0][1] * r[1][3] * r[3][0]) + (r[0][3] * r[1][0] * r[3][1]) - (r[0][0] * r[1][3] * r[3][1]) - (r[0][1] * r[1][0] * r[3][3]) + (r[0][0] * r[1][1] * r[3][3]) )
    r[2][3] = (1 / a) * (  (r[0][3] * r[1][1] * r[2][0]) - (r[0][1] * r[1][3] * r[2][0]) - (r[0][3] * r[1][0] * r[2][1]) + (r[0][0] * r[1][3] * r[2][1]) + (r[0][1] * r[1][0] * r[2][3]) - (r[0][0] * r[1][1] * r[2][3]) )
    r[3][0] = (1 / a) * (  (r[1][2] * r[2][1] * r[3][0]) - (r[1][1] * r[2][2] * r[3][0]) - (r[1][2] * r[2][0] * r[3][1]) + (r[1][0] * r[2][2] * r[3][1]) + (r[1][1] * r[2][0] * r[3][2]) - (r[1][0] * r[2][1] * r[3][2]) )
    r[3][1] = (1 / a) * ( -(r[0][2] * r[2][1] * r[3][0]) + (r[0][1] * r[2][2] * r[3][0]) + (r[0][2] * r[2][0] * r[3][1]) - (r[0][0] * r[2][2] * r[3][1]) - (r[0][1] * r[2][0] * r[3][2]) + (r[0][0] * r[2][1] * r[3][2]) )
    r[3][2] = (1 / a) * (  (r[0][2] * r[1][1] * r[3][0]) - (r[0][1] * r[1][2] * r[3][0]) - (r[0][2] * r[1][0] * r[3][1]) + (r[0][0] * r[1][2] * r[3][1]) + (r[0][1] * r[1][0] * r[3][2]) - (r[0][0] * r[1][1] * r[3][2]) )
    r[3][3] = (1 / a) * ( -(r[0][2] * r[1][1] * r[2][0]) + (r[0][1] * r[1][2] * r[2][0]) + (r[0][2] * r[1][0] * r[2][1]) - (r[0][0] * r[1][2] * r[2][1]) - (r[0][1] * r[1][0] * r[2][2]) + (r[0][0] * r[1][1] * r[2][2]) )
    return r

if __name__ == "__main__":
    error_handling(0)
    text = str(argv[1])
    key = str(argv[2])
    code = int(argv[3])
    if code < 0 or code > 1 or len(key) > 16:
        error_handling(84)

    m = encoder_key_mat(mat_key(key), key)
    n = encode_text(text, m)
    result = mult_matrix(n, m)

    if code == 0:
        print("Key matrix:")
        show_matrix_encode(m)
        print("\nEncrypted message:")
        show_result(result)
    elif code == 1:
        print("Key matrix:")
        a = manage_inverse(m)
        show_matrix_decode(a)
        print("\nDecrypted message:")
        b = conversion_phrase(text, m, a)
        for i in range(len(b)):
            for j in range(len(b[0])):
                b[i][j] = round(b[i][j])
        conv_int_to_char(b)
        print("\0")
    exit(0)
